package com.onlinebookstore.inventoryservice.service;

import com.onlinebookstore.inventoryservice.exception.InventoryNotFoundException;
import com.onlinebookstore.inventoryservice.model.Inventory;
import com.onlinebookstore.inventoryservice.repository.InventoryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class InventoryServiceTest {

    @Mock
    private InventoryRepository inventoryRepository;

    @InjectMocks
    private InventoryService inventoryService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetInventoryById_Found() {
        Inventory mockInventory = new Inventory();
        mockInventory.setId(1L);
        mockInventory.setQuantity(10);

        when(inventoryRepository.findById(1L)).thenReturn(Optional.of(mockInventory));

        Inventory inventory = inventoryService.getInventoryById(1L);

        assertNotNull(inventory);
        assertEquals(10, inventory.getQuantity());
        verify(inventoryRepository, times(1)).findById(1L);
    }

    @Test
    void testGetInventoryById_NotFound() {
        when(inventoryRepository.findById(99L)).thenReturn(Optional.empty());

        assertThrows(InventoryNotFoundException.class, () -> inventoryService.getInventoryById(99L));
        verify(inventoryRepository, times(1)).findById(99L);
    }
}

package com.onlinebookstore.orderservice.service;

import com.onlinebookstore.orderservice.exception.OrderNotFoundException;
import com.onlinebookstore.orderservice.model.Order;
import com.onlinebookstore.orderservice.repository.OrderRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class OrderServiceTest {

    @Mock
    private OrderRepository orderRepository;

    @InjectMocks
    private OrderService orderService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetOrderById_Found() {
        Order mockOrder = new Order();
        mockOrder.setId(1L);
        mockOrder.setStatus("DELIVERED");

        when(orderRepository.findById(1L)).thenReturn(Optional.of(mockOrder));

        Order order = orderService.getOrderById(1L);

        assertNotNull(order);
        assertEquals("DELIVERED", order.getStatus());
        verify(orderRepository, times(1)).findById(1L);
    }

    @Test
    void testGetOrderById_NotFound() {
        when(orderRepository.findById(99L)).thenReturn(Optional.empty());

        assertThrows(OrderNotFoundException.class, () -> orderService.getOrderById(99L));
        verify(orderRepository, times(1)).findById(99L);
    }
}

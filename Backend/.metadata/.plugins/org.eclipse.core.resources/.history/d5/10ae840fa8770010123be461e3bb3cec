package com.onlinebookstore.orderservice.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.onlinebookstore.orderservice.model.Order;
import com.onlinebookstore.orderservice.service.OrderService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest
public class OrderControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private OrderService orderService;

    private Order order;

    @BeforeEach
    public void setUp() {
        order = new Order();
        order.setId(1L);
        order.setUserId(101L);
        order.setBookId(202L);
        order.setQuantity(2);
        order.setTotalPrice(500.0);
        order.setOrderDate(LocalDateTime.now());
        order.setStatus("PLACED");
    }

    @Test
    public void testGetAllOrders() throws Exception {
        given(orderService.getAllOrders()).willReturn(Arrays.asList(order));

        mockMvc.perform(get("/orders"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(order.getId()))
                .andExpect(jsonPath("$[0].status").value(order.getStatus()));
    }

    @Test
    public void testGetOrderById() throws Exception {
        given(orderService.getOrderById(1L)).willReturn(Optional.of(order));

        mockMvc.perform(get("/orders/{id}", 1L))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(order.getId()))
                .andExpect(jsonPath("$.status").value(order.getStatus()));
    }

    @Test
    public void testCreateOrder() throws Exception {
        given(orderService.createOrder(any(Order.class))).willReturn(order);

        mockMvc.perform(post("/orders")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(order)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.status").value(order.getStatus()));
    }

    @Test
    public void testUpdateOrder() throws Exception {
        given(orderService.updateOrder(eq(1L), any(Order.class))).willReturn(Optional.of(order));

        mockMvc.perform(put("/orders/{id}", 1L)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(order)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value(order.getStatus()));
    }

    @Test
    public void testDeleteOrder() throws Exception {
        mockMvc.perform(delete("/orders/{id}", 1L))
                .andExpect(status().isNoContent());
    }
}
